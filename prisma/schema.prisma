// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

// In the future we need to add country or nationality column
model User {
  id             String    @id @default(cuid())
  email          String?   @unique
  emailVerified  DateTime?
  passwordDigest String?

  accounts     Account[]
  role         UserRole      @default(STUDENT)
  profile      Profile?
  project      Project?
  subscription Subscription?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Project {
  id               String  @id @default(cuid())
  name             String
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String  @unique
  point            Float   @default(0)
  place            Int?
  teamName         String?
  city             String?
  district         String?
  teamIntroFile    String?
  projectIntroFile String?
  projectDocFile   String?
  type             String?
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

model Account {
  id                   String    @id @default(cuid())
  pictureKey           String?
  firstName            String
  lastName             String
  sex                  String?
  age                  Int?
  nationality          String?
  familyName           String?
  birthDate            DateTime?
  registerNo           String?
  phoneNumber          String?
  emergencyPhoneNumber String?
  emergencyPhoneOwner  String?
  city                 String?
  district             String?
  street               String?
  education            String?
  profession           String?
  occupation           String?
  userId               String
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now())
}

model Profile {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String    @unique
  firstName    String    @default("")
  lastName     String    @default("")
  firstNameEng String?   @default("")
  lastNameEng  String?   @default("")
  birthDate    DateTime?
  height       Int?
  weight       Int?
  country      String? //Will create country table and map to this property
  language     String?
  sex          String?
  picture      String    @default("")
  notifyEmail  Boolean   @default(true)
  notifyPush   Boolean   @default(true)
  notifyBadge  Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Product {
  id          String   @id @default(cuid())
  active      Boolean  @default(false)
  name        String
  description String?
  image       String?
  metadata    Json?
  prices      Price[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Price {
  id              String         @id @default(cuid())
  product         Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String
  active          Boolean        @default(false)
  currency        String
  interval        PriceInterval?
  unitAmount      Int?
  intervalCount   Int?
  trialPeriodDays Int?
  type            PriceType?
  subscriptions   Subscription[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

//cardTable
model Subscription {
  id                String             @id @default(cuid())
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String             @unique
  price             Price              @relation(fields: [priceId], references: [id])
  priceId           String
  status            SubscriptionStatus
  startDate         DateTime?
  endedAt           DateTime?
  trialEnd          DateTime?
  trialStart        DateTime?
  cancelAt          DateTime?
  cancelAtPeriodEnd Boolean?
  canceledAt        DateTime?
  metadata          Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

enum PriceType {
  recurring
  one_time
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}

enum PriceInterval {
  day
  month
  week
  year
}
